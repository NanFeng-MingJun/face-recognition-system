---
version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.1.0
    hostname: broker
    container_name: broker
    # restart: on-failure 
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - ./kafka/plugins:/usr/local/share/kafka/plugins
      - ./kafka/properties:/etc/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://0.tcp.jp.ngrok.io:10136
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  broker-connect:
    image: confluentinc/cp-kafka:7.1.0
    hostname: broker-connect
    command: connect-standalone /etc/kafka/connect-standalone.properties /etc/kafka/redis-request.properties
    container_name: broker-connect
    # restart: on-failure 
    depends_on:
      - broker
    volumes:
      - ./kafka/plugins:/usr/local/share/kafka/plugins
      - ./kafka/properties:/etc/kafka

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.1.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - broker-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  redis-request:
    image: redis:latest
    hostname: redis-request
    container_name: redis-request
    depends_on:
      - broker
    ports:
      - "6379:6379"

  kong:
    image: kong:2.8.1-alpine
    hostname: kong
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "127.0.0.1:8001:8001"
      - "127.0.0.1:8444:8444"
    volumes:
      - ./kong/declarative:/kong/declarative

  identification-ticket:
    build:
      context: ./identificationTicket
    container_name: identification-ticket
    hostname: identification-ticket
    ports:
      - 3002:3002
    depends_on:
      - broker

  webhook-service:
    build:
      context: ./webhookService
    container_name: webhook-service
    hostname: webhook-service
    ports:
      - 3003:3003
    depends_on:
      - broker
    


# volumes:
#   kafka-properties:
#     external: false
